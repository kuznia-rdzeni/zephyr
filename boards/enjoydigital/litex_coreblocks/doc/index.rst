.. _litex-coreblocks:

Coreblocks on LiteX
###################

Coreblocks on LiteX is an example of a system on a chip (SoC) that consists of
a `Coreblocks <https://github.com/kuzia-rdzeni/coreblocks>`_ soft processor
wrapped in LiteX SoC with additional peripherals. This setup can be generated using
`Zephyr on LiteX Coreblocks (reference platform)
<https://github.com/litex-hub/zephyr-on-litex-coreblocks>`_
and `LiteX SoC Builder <https://github.com/enjoy-digital/litex>`_.
Currently a patched version of `LiteX SoC Builder with Coreblocks support <https://github.com/kuzia-rdzeni/litex_>`_
is needed.

Coreblocks is an experimental, modular out-of-order `RISC-V <https://riscv.org/>`_ core generator
implemented in `Amaranth <https://github.com/amaranth-lang/amaranth>`_.
More information about the project can be found on
`Coreblocks repository <https://github.com/kuznia-rdzeni/coreblocks>`_.

LiteX provides ready-made system components such as buses, streams, interconnects,
common cores, and CPU wrappers to create SoCs easily. The tool contains
mechanisms for integrating, simulating, and building various designs
that target multiple chips of different vendors.
More information about the LiteX project can be found on
`LiteX's website <https://github.com/enjoy-digital/litex>`_.

Customization
*************

Both Coreblocks and LiteX are hardware generators and can be deeply customized.
DTS and configurations provided in this repository are made specifically
for reference platform defined in `Zephyr on LiteX Coreblocks
<https://github.com/litex-hub/zephyr-on-litex-coreblocks>`_

This platform uses ``coreblocks-basic`` configuration.

If you would like to change Coreblocks processor variant, you will need to update
SoC configuration to generate bitstream with different processor; Kconfigs and DTS
trees to reflect RISC-V architectural changes.
Currently defining custom processor configuration (and not setting pre-defined variant) needs
patching it in and reinstalling `pythondata-cpu-coreblocks
<https://github.com/kuznia-rdzeni/pythondata-cpu-coreblocks>`_ python package, that provides Coreblocks
sources used by LiteX.

If you modify or add LiteX SoC peripherals, you will need to change DTS to reflect
new adress map, irq mappings (both dynamically generated by LiteX) or
add completely new devices.

Bitstream
*********

Follow instructions from `Zephyr on LiteX Coreblocks
<https://github.com/litex-hub/zephyr-on-litex-coreblocks>`_ to generate and upload
reference platform bitstream for your FPGA board.

Programming and booting
*************************

Building
========

Applications for the ``litex_coreblocks`` board configuration can be built as usual
(see :ref:`build_an_application`).
In order to build the application for ``litex_coreblocks``, set the ``BOARD`` variable
to ``litex_coreblocks``.

Booting
=======

LiteX SoC by default boots to LiteX bootloader.

You can boot from a serial port using `litex_term` (replace `ttyUSBX` with your device) , e.g.:

.. code-block:: bash

   litex_term /dev/ttyUSBX --speed 115200 --kernel zephyr.bin
